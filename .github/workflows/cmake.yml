name: CMake Build

on: 
  # push代码时触发workflow
  push:
    paths-ignore: # 下列文件的变更不触发部署，可以自行添加
        - '.github/workflows/clean_cache.yml'
        - '.github/workflows/delete_workflow.yml'
        - '.github/workflows/qmake.yml'
        - '.github/workflows/readme.yml'
        - '.github/workflows/toolchain.yml'    
        - 'doc/**'
        - 'translation/**'
        - '.clang-*'
        - '.gitignore'
        - 'LICENSE'
        - 'README*'
  pull_request:
    paths-ignore: # 下列文件的变更不触发部署，可以自行添加
        - '.github/workflows/clean_cache.yml'
        - '.github/workflows/delete_workflow.yml'
        - '.github/workflows/qmake.yml'
        - '.github/workflows/readme.yml'
        - '.github/workflows/toolchain.yml'    
        - 'doc/**'
        - 'translation/**'
        - '.clang-*'
        - '.gitignore'
        - 'LICENSE'
        - 'README*'

jobs:
  build:
    name: Build
    env:
      MACOSX_DEPLOYMENT_TARGET: 11.0
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - windows-latest
          - macos-latest
          - ubuntu-latest
        qt_ver: 
          - 6.7.0
        qt_modules:
          - qt5compat qtserialport qtnetworkauth qtmultimedia qtimageformats
        build_type:
          - "RelWithDebInfo"
        generators:
          - "Ninja"
        arch:
          - x86_64
        vcpkg_libs:
          - breakpad crashpad
        include:
          - os: macos-latest
            qt_ver: 6.7.0
            qt_modules: qt5compat qtserialport qtnetworkauth qtmultimedia qtimageformats
            build_type: "RelWithDebInfo"
            generators: "Ninja"
            arch: arm64
            vcpkg_libs: breakpad crashpad

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Install vcpkg on macos
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          sudo chmod +x install-vcpkg.sh
          sudo ./install-vcpkg.sh
        working-directory: ./scripts/macos

      # jurplel/install-qt-action@v3, 这个action会修改默认的python版本，
      # 会导致部分使用vcpkg的库编译失败，比如libsystemd，所以需要删除vcpkg.json
      - name: Delete vcpkg.json
        shell: bash
        run: |
          rm vcpkg.json

      - name: Cache windows vcpkg
        if: startsWith(matrix.os, 'windows')
        uses: actions/cache@v4
        with: 
          path: C:\vcpkg\installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-installed-
            ${{ runner.os }}-
          save-always: true
      - name: Cache macos or ubuntu vcpkg
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
        uses: actions/cache@v4
        with: 
          path: /usr/local/share/vcpkg/installed
          key: ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-vcpkg-installed-${{ matrix.os }}-
            ${{ runner.os }}-vcpkg-installed-
            ${{ runner.os }}-
          save-always: true

      - name: Install dependencies on windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          choco install ninja
          ninja --version
          cmake --version
          vcpkg install ${{ matrix.vcpkg_libs }} --triplet x64-windows || (cat C:/vcpkg/installed/vcpkg/issue_body.md && exit 1)
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo apt-get update
          sudo apt-get install ninja-build build-essential libgl1-mesa-dev clang
          ninja --version
          cmake --version
          gcc --version
          vcpkg install ${{ matrix.vcpkg_libs }} --triplet x64-linux || (cat /usr/local/share/vcpkg/installed/vcpkg/issue_body.md && exit 1)
      - name: Install dependencies on macos
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          brew install ninja pkg-config python-setuptools
          ninja --version
          cmake --version
          clang --version
          vcpkg install ${{ matrix.vcpkg_libs }} --triplet x64-osx || (cat /usr/local/share/vcpkg/installed/vcpkg/issue_body.md && exit 1)
          vcpkg install ${{ matrix.vcpkg_libs }} --triplet arm64-osx || (cat /usr/local/share/vcpkg/installed/vcpkg/issue_body.md && exit 1)
   
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.qt_ver }}
          install-deps: 'true'
          modules: '${{ matrix.qt_modules }}'
          cache: 'true'

      - name: Configure msvc for amd64
        if: startsWith(matrix.os, 'windows')
        uses: ilammy/msvc-dev-cmd@v1 
        with:
          arch: amd64
      - name: Configure windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          cmake \
            -S . \
            -B ./build \
            -DCMAKE_C_COMPILER=cl \
            -DCMAKE_CXX_COMPILER=cl \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -G "${{ matrix.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir
      - name: Configure macos or ubuntu
        if: startsWith(matrix.os, 'macos') || startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          cmake \
            -S . \
            -B ./build \
            -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
            -DCMAKE_OSX_ARCHITECTURES="${{ matrix.arch }}" \
            -G "${{ matrix.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir

      - name: Build
        shell: bash
        run: |
          cmake --build ./build --config ${{ matrix.build_type }}

      - name: Deploy windows
        if: startsWith(matrix.os, 'windows')
        shell: bash
        run: |
          ./../../packaging/windows/deploy.sh 
        working-directory: ./bin-64/${{ matrix.build_type }}
      - name: Deploy macos
        if: startsWith(matrix.os, 'macos')
        shell: bash
        run: |
          sudo chmod -R a+x .
          sudo chmod 755 ./../../packaging/macos/deploy.sh
          ./../../packaging/macos/deploy.sh
        working-directory: ./bin-64/${{ matrix.build_type }}
      - name: Deploy ubuntu
        if: startsWith(matrix.os, 'ubuntu')
        shell: bash
        run: |
          sudo chmod -R a+x .
          sudo chmod 755 ./../../packaging/ubuntu/deploy.sh
          ./../../packaging/ubuntu/deploy.sh
        working-directory: ./bin-64/${{ matrix.build_type }}

      - name: 7z package
        shell: bash
        run: |
          ls -al ./bin-64/${{ matrix.build_type }}
          CURRENT_DATE=$(date '+%Y%m%d')
          filename=Qt-App_${{ runner.os }}_${{ matrix.arch }}_${CURRENT_DATE}.7z
          echo "artifactPath=$filename" >> $GITHUB_ENV
          7z a -t7z -r -mx=9 -mmt ${filename} ./bin-64/${{ matrix.build_type }}/*
      - name: Upload packages
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.os }}-${{matrix.arch}}-${{ matrix.build_type }}
          path: ${{ env.artifactPath }}

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/')

    runs-on: ubuntu-latest

    steps:
      - name: Download fonts
        shell: bash
        run: |
          wget -c -nv "https://github.com/RealChuan/Qt-App/releases/download/0.0.1/fonts.7z"

      - name: Download packages
        uses: actions/download-artifact@v4

      - name: Move packages
        shell: bash
        run: |
          ls -al
          mv ./windows*/*.7z .
          mv ./ubuntu*/*.7z .
          mv ./macos*/*.7z .
          ls -al

      - name: Rename Files According to Tag
        shell: bash
        run: |
          TAG_NAME="${GITHUB_REF#refs/tags/}"

          for FILE in Qt-App_*.7z; do
            if [[ -f "$FILE" ]]; then
              BASENAME=$(basename "$FILE" .7z)
              REST="${BASENAME#Qt-App_}"
              NEW_BASENAME="Qt-App_${TAG_NAME}_${REST}"
              NEW_FILE="${NEW_BASENAME}.7z"
              mv "$FILE" "$NEW_FILE"
              echo "Renamed $FILE to $NEW_FILE"
            fi
          done

          ls -al

      - name: Create release
        uses: softprops/action-gh-release@v2
        with:
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            *.7z
